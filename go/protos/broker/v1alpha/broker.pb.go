// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: protocols/broker/v1alpha/broker.proto

package broker

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contract *IntentContract `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
}

func (x *RegisterIntentRequest) Reset() {
	*x = RegisterIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protocols_broker_v1alpha_broker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterIntentRequest) ProtoMessage() {}

func (x *RegisterIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protocols_broker_v1alpha_broker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// 省略其他生成的代码...

// 注册服务
func RegisterIntentBrokerServer(s grpc.ServiceRegistrar, srv IntentBrokerServer) {
	s.RegisterService(&IntentBroker_ServiceDesc, srv)
}

// IntentBroker_ServiceDesc 是 IntentBroker 服务的 gRPC 服务描述符
var IntentBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nfa.broker.v1alpha.IntentBroker",
	HandlerType: (*IntentBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterIntent",
			Handler:    _IntentBroker_RegisterIntent_Handler,
		},
		{
			MethodName: "MatchIntent",
			Handler:    _IntentBroker_MatchIntent_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _IntentBroker_Heartbeat_Handler,
		},
		{
			MethodName: "UnregisterIntent",
			Handler:    _IntentBroker_UnregisterIntent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocols/broker/v1alpha/broker.proto",
}